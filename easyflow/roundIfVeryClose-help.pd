#N canvas 438 211 779 421 10;
#X msg 49 103 3.33;
#X obj 573 363 easyflow-info;
#X floatatom 49 248 10 0 0 0 - - -, f 10;
#X text 43 13 [roundIfVeryClose] takes a float as input.;
#X text 43 39 If the input is very close to a integer it is rounded.
Otherwise it is passed unchanged.;
#X msg 180 167 5.999;
#X msg 84 129 3.001;
#X msg 134 129 3.0011;
#X msg 129 167 5.998;
#X msg 307 104 3.33;
#X floatatom 307 249 10 0 0 0 - - -, f 10;
#X msg 342 130 3.01;
#X msg 392 130 3.1;
#X text 503 164 Optional argument defines the proximity., f 13;
#X text 603 181 (default is 3);
#N canvas 624 146 970 527 applications 0;
#X text 38 21 It is specially useful for rounding numbers in displays.
;
#N canvas 0 50 450 250 (subpatch) 0;
#X array \$0-table 100 float 0;
#X coords 0 1.99226 100 0 200 140 1 0 0;
#X restore 531 142 graph;
#N canvas 422 191 836 596 normalize 0;
#X obj 37 42 inlet;
#X obj 37 64 trigger bang bang, f 21;
#X floatatom 181 111 10 0 0 0 - - -, f 10;
#X floatatom 37 111 10 0 0 0 - - -, f 10;
#X obj 37 280 pack float float;
#X obj 37 351 trigger a a, f 28;
#X obj 280 370 trigger a bang;
#X obj 280 417 list prepend;
#X obj 422 413 expr size ("$s1");
#X obj 422 364 f \$0;
#X floatatom 422 435 5 0 0 0 - - -, f 5;
#X msg 308 565 bounds xMin yMax xMax yMin;
#X msg 280 449 bounds 0 \$3 \$1 \$2;
#N canvas 0 50 446 600 assert 0;
#X obj 46 53 inlet;
#X obj 46 505 outlet;
#X obj 46 107 unpack f f;
#X obj 46 139 ==;
#X obj 46 80 trigger a a a, f 40;
#X obj 222 130 unpack f;
#X obj 46 323 f;
#X text 79 321 min;
#X text 63 186 if equal (trying to create an rectangle that gros from
y=0 to y=0 for example), f 19;
#X obj 222 264 t f;
#X obj 46 345 t f f;
#X obj 46 417 pack f f;
#X obj 99 389 + 1;
#X obj 298 388 list;
#X obj 46 161 sel 1 0;
#X connect 0 0 4 0;
#X connect 2 0 3 0;
#X connect 2 1 3 1;
#X connect 3 0 14 0;
#X connect 4 0 2 0;
#X connect 4 1 5 0;
#X connect 4 2 13 1;
#X connect 5 0 9 0;
#X connect 6 0 10 0;
#X connect 9 0 6 1;
#X connect 10 0 11 0;
#X connect 10 1 12 0;
#X connect 11 0 1 0;
#X connect 12 0 11 1;
#X connect 13 0 1 0;
#X connect 14 0 6 0;
#X connect 14 1 13 0;
#X restore 37 304 pd assert max is bigger than min (in order to avoid
graph: empty bounds rectangle);
#X msg 309 538 ylabel xCoordOfLabel p1_x p1_y p2_x p2_y ...;
#X msg 37 399 ylabel -2 \$1 \$2;
#X msg 482 48 normalize;
#X obj 482 70 s \$0-table;
#X obj 181 89 array max \$0-table;
#X obj 37 89 array min \$0-table;
#X msg 422 386 symbol \$1-table;
#X obj 37 511 s \$0-table;
#X text 308 513 Syntax;
#X text 481 15 Note:;
#X text 564 46 does not work for log (?);
#X obj 37 223 easyflow/roundIfVeryClose 20;
#X obj 181 152 easyflow/roundIfVeryClose 20;
#X obj 374 89 inlet;
#X floatatom 374 111 5 0 0 0 - - -, f 5;
#X connect 0 0 1 0;
#X connect 1 0 19 0;
#X connect 1 1 18 0;
#X connect 2 0 26 0;
#X connect 3 0 25 0;
#X connect 4 0 13 0;
#X connect 5 0 15 0;
#X connect 5 1 6 0;
#X connect 6 0 7 0;
#X connect 6 1 9 0;
#X connect 7 0 12 0;
#X connect 8 0 10 0;
#X connect 9 0 20 0;
#X connect 10 0 7 1;
#X connect 12 0 21 0;
#X connect 13 0 5 0;
#X connect 15 0 21 0;
#X connect 16 0 17 0;
#X connect 18 0 2 0;
#X connect 19 0 3 0;
#X connect 20 0 8 0;
#X connect 25 0 4 0;
#X connect 26 0 4 1;
#X connect 27 0 28 0;
#X connect 28 0 26 1;
#X connect 28 0 25 1;
#X restore 60 473 pd normalize table;
#X msg 60 198 2;
#X floatatom 183 446 5 0 0 0 - - -, f 5;
#N canvas 0 50 321 359 writeAnExponential 0;
#X obj 44 171 easyflow/counter;
#X obj 44 200 trigger float float;
#X obj 44 295 tabwrite \$0-table, f 22;
#X floatatom 195 222 5 0 0 0 - - -, f 5;
#X obj 44 54 f \$0;
#X msg 44 76 symbol \$1-table;
#X obj 44 98 expr size("$s1");
#X floatatom 44 120 5 0 0 0 - - -, f 5;
#X msg 44 143 set 0 \, \$1;
#X obj 44 255 expr pow($f1 \, 0.15);
#X obj 44 24 inlet;
#X connect 0 0 1 0;
#X connect 1 0 9 0;
#X connect 1 1 3 0;
#X connect 3 0 2 1;
#X connect 4 0 5 0;
#X connect 5 0 6 0;
#X connect 6 0 7 0;
#X connect 7 0 8 0;
#X connect 8 0 0 0;
#X connect 9 0 2 0;
#X connect 10 0 4 0;
#X restore 139 320 pd writeAnExponential;
#X text 57 140 rounds to integer if difference from the closest integer
is, f 28;
#X text 109 193 smaller than 10^(-2);
#X msg 71 222 3;
#X text 109 221 smaller than 10^(-3);
#X obj 60 416 trigger bang float;
#N canvas 0 50 341 228 reset 0;
#X obj 44 28 inlet;
#X obj 44 147 s \$0-table;
#X msg 44 85 ylabel -5 -1 0 1;
#X msg 115 114 bounds 0 1 100 -1;
#X obj 44 56 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144 -1
-1;
#X connect 0 0 4 0;
#X connect 2 0 1 0;
#X connect 3 0 1 0;
#X connect 4 0 2 0;
#X connect 4 0 3 0;
#X restore 218 284 pd reset y range from -1 to 1;
#X obj 60 260 trigger float bang bang;
#X text 39 45 Here we are writing an exponential to a table and reading
it's min and max value to set the curve visualization to start at the
min value and end at the max value., f 97;
#X obj 60 366 pipe 2000;
#X text 136 361 wait 2 seconds just so you see the default range being
applied, f 33;
#X text 40 84 The max value is 1.99226. Supose we want to intelligently
round it to 2, f 72;
#X text 284 192 [rounds];
#X text 269 222 [don't round];
#X text 520 323 2-1.99226 = 0.00774;
#X text 519 354 0.00774 is smaller than 10^(-2) so if you use the argument
2 it rounds, f 49;
#X text 519 404 0.00774 is bigger than 10^(-3) so if you use the argument
3 it will not round, f 49;
#X connect 3 0 12 0;
#X connect 4 0 2 1;
#X connect 8 0 12 0;
#X connect 10 0 2 0;
#X connect 10 1 4 0;
#X connect 12 0 14 0;
#X connect 12 1 5 0;
#X connect 12 2 11 0;
#X connect 14 0 10 0;
#X restore 529 41 pd applications;
#X obj 49 226 roundIfVeryClose;
#X obj 307 227 roundIfVeryClose 2;
#X obj 42 319 roundIfVeryClose 4;
#X text 186 318 rounds if, f 10;
#X text 204 337 fractional part <= 10^(-4) OR, f 30;
#X text 204 354 fractional part >= 1-10^(-4), f 30;
#X msg 387 168 5.99;
#X msg 438 168 5.991;
#X text 500 232 In terms of 10^(-x);
#X text 484 282 The bigger the argument the closest the number will
have to be to an integer be rounded., f 35;
#X connect 0 0 16 0;
#X connect 5 0 16 0;
#X connect 6 0 16 0;
#X connect 7 0 16 0;
#X connect 8 0 16 0;
#X connect 9 0 17 0;
#X connect 11 0 17 0;
#X connect 12 0 17 0;
#X connect 16 0 2 0;
#X connect 17 0 10 0;
#X connect 22 0 17 0;
#X connect 23 0 17 0;
